"use strict";
require("typings-test");
require("should");
var path = require("path");
var beautylog = require("beautylog");
//set up environment
process.env.CI_BUILD_REPO = "https://yyyyyy:xxxxxxxx@gitlab.com/mygroup/myrepo.git";
process.env.NPMCI_SSHKEY_1 = "hostString|somePrivKey|##";
process.env.NPMTS_TEST = "true";
process.cwd = function () {
    return path.join(__dirname, "assets/");
};
var NpmciBuildDocker = require("../dist/npmci.build.docker");
var NpmciPublish = require("../dist/npmci.publish");
var NpmciTest = require("../dist/npmci.test");
var NpmciSsh = require("../dist/npmci.ssh");
var dockerfile1;
var dockerfile2;
var sortableArray;
describe("NPMCI", function () {
    describe("build.docker", function () {
        it("should return valid Dockerfiles", function () {
            dockerfile1 = new NpmciBuildDocker.Dockerfile({ filePath: "./Dockerfile", read: true });
            dockerfile2 = new NpmciBuildDocker.Dockerfile({ filePath: "./Dockerfile_sometag1", read: true });
            dockerfile1.version.should.equal("latest");
            dockerfile2.version.should.equal("sometag1");
        });
        it("should read a directory of Dockerfiles", function (done) {
            NpmciBuildDocker.readDockerfiles()
                .then(function (readDockerfilesArrayArg) {
                readDockerfilesArrayArg[1].version.should.equal("sometag1");
                sortableArray = readDockerfilesArrayArg;
                done();
            });
        });
        it("should sort an array of Dockerfiles", function (done) {
            NpmciBuildDocker.sortDockerfiles(sortableArray)
                .then(function (sortedArrayArg) {
                beautylog.success("final result");
                console.log(sortedArrayArg);
                done();
            });
        });
        it("should correctly chain Dockerfile handling", function (done) {
            NpmciBuildDocker.build()
                .then(function () {
                done();
            });
        });
    });
    describe(".publish.docker", function () {
        it("should publish all built Dockerfiles", function (done) {
            NpmciPublish.publish("docker")
                .then(function () {
                done();
            });
            ;
        });
    });
    describe(".test.npm", function () {
        it("should source nvm using bash and install a specific node version, then test it", function (done) {
            NpmciTest.test("legacy")
                .then(function () {
                return NpmciTest.test("lts");
            })
                .then(function () {
                return NpmciTest.test("stable");
            })
                .then(function () {
                done();
            });
        });
    });
    describe("test.docker", function () {
        it("should test dockerfiles", function (done) {
            NpmciTest.test("docker")
                .then(function () {
                done();
            });
        });
    });
    describe("npmci prepare ssh", function () {
        it("should pick up SSH keys", function (done) {
            NpmciSsh.ssh()
                .then(function () {
                done();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
