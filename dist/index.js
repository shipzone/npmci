#!/usr/bin/env node
"use strict";
require("typings-global");
var plugins = require("./npmci.plugins");
var paths = require("./npmci.paths");
var npmciInfo = new plugins.projectinfo.ProjectinfoNpm(paths.NpmciPackageRoot);
plugins.beautylog.log("npmci version: " + npmciInfo.version);
var npmci_build_1 = require("./npmci.build");
var npmci_command_1 = require("./npmci.command");
var npmci_install_1 = require("./npmci.install");
var npmci_publish_1 = require("./npmci.publish");
var npmci_prepare_1 = require("./npmci.prepare");
var npmci_test_1 = require("./npmci.test");
var npmci_trigger_1 = require("./npmci.trigger");
var NpmciEnv = require("./npmci.env");
var npmci_build_2 = require("./npmci.build");
exports.build = npmci_build_2.build;
var npmci_install_2 = require("./npmci.install");
exports.install = npmci_install_2.install;
var npmci_publish_2 = require("./npmci.publish");
exports.publish = npmci_publish_2.publish;
var command;
var commandOption;
plugins.commander
    .arguments('<commandarg> [commandoptionarg]')
    .action(function (commandarg, commandoptionarg) {
    command = commandarg;
    commandOption = commandoptionarg;
});
plugins.commander.parse(process.argv);
if (typeof command === 'undefined') {
    console.error('no command given!');
    process.exit(1);
}
switch (command) {
    case "build":
        npmci_build_1.build(commandOption)
            .then(NpmciEnv.configStore);
        break;
    case "command":
        npmci_command_1.command()
            .then(NpmciEnv.configStore);
        break;
    case "install":
        npmci_install_1.install(commandOption)
            .then(NpmciEnv.configStore);
        ;
        break;
    case "prepare":
        npmci_prepare_1.prepare(commandOption)
            .then(NpmciEnv.configStore);
        ;
        break;
    case "publish":
        npmci_publish_1.publish(commandOption)
            .then(NpmciEnv.configStore);
        ;
        break;
    case "test":
        npmci_test_1.test(commandOption)
            .then(NpmciEnv.configStore);
        break;
    case "trigger":
        npmci_trigger_1.trigger();
        break;
    default:
        plugins.beautylog.error("command " + commandOption.blue + " not recognised");
        process.exit(1);
        break;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztRQUM3RSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLEtBQUssQ0FBQztBQUNkLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgXCJ0eXBpbmdzLWdsb2JhbFwiO1xuaW1wb3J0ICogYXMgcGx1Z2lucyBmcm9tIFwiLi9ucG1jaS5wbHVnaW5zXCI7XG5pbXBvcnQgKiBhcyBwYXRocyBmcm9tIFwiLi9ucG1jaS5wYXRoc1wiO1xubGV0IG5wbWNpSW5mbyA9IG5ldyBwbHVnaW5zLnByb2plY3RpbmZvLlByb2plY3RpbmZvTnBtKHBhdGhzLk5wbWNpUGFja2FnZVJvb3QpO1xucGx1Z2lucy5iZWF1dHlsb2cubG9nKFwibnBtY2kgdmVyc2lvbjogXCIgKyBucG1jaUluZm8udmVyc2lvbik7XG5cbmltcG9ydCB7YnVpbGR9IGZyb20gXCIuL25wbWNpLmJ1aWxkXCJcbmltcG9ydCB7Y29tbWFuZCBhcyBjb21tYW5kMn0gZnJvbSBcIi4vbnBtY2kuY29tbWFuZFwiO1xuaW1wb3J0IHtpbnN0YWxsfSBmcm9tIFwiLi9ucG1jaS5pbnN0YWxsXCI7XG5pbXBvcnQge3B1Ymxpc2h9IGZyb20gXCIuL25wbWNpLnB1Ymxpc2hcIjtcbmltcG9ydCB7cHJlcGFyZX0gZnJvbSBcIi4vbnBtY2kucHJlcGFyZVwiO1xuaW1wb3J0IHt0YWcsIHJldGFnfSBmcm9tIFwiLi9ucG1jaS50YWdcIjtcbmltcG9ydCB7dGVzdH0gZnJvbSBcIi4vbnBtY2kudGVzdFwiO1xuaW1wb3J0IHt0cmlnZ2VyfSBmcm9tIFwiLi9ucG1jaS50cmlnZ2VyXCI7XG5pbXBvcnQgKiBhcyBOcG1jaUVudiBmcm9tIFwiLi9ucG1jaS5lbnZcIjtcblxuZXhwb3J0IHtidWlsZH0gZnJvbSBcIi4vbnBtY2kuYnVpbGRcIlxuZXhwb3J0IHtpbnN0YWxsfSBmcm9tIFwiLi9ucG1jaS5pbnN0YWxsXCI7XG5leHBvcnQge3B1Ymxpc2h9IGZyb20gXCIuL25wbWNpLnB1Ymxpc2hcIjtcblxubGV0IGNvbW1hbmQ7XG5sZXQgY29tbWFuZE9wdGlvbjpzdHJpbmc7XG5cbnBsdWdpbnMuY29tbWFuZGVyXG4gICAgLmFyZ3VtZW50cygnPGNvbW1hbmRhcmc+IFtjb21tYW5kb3B0aW9uYXJnXScpXG4gICAgLmFjdGlvbihmdW5jdGlvbiAoY29tbWFuZGFyZywgY29tbWFuZG9wdGlvbmFyZykge1xuICAgICAgICBjb21tYW5kID0gY29tbWFuZGFyZztcbiAgICAgICAgY29tbWFuZE9wdGlvbiA9IGNvbW1hbmRvcHRpb25hcmc7XG4gICAgfSk7XG4gXG5wbHVnaW5zLmNvbW1hbmRlci5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuIFxuaWYgKHR5cGVvZiBjb21tYW5kID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ25vIGNvbW1hbmQgZ2l2ZW4hJyk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG5zd2l0Y2ggKGNvbW1hbmQpe1xuICAgIGNhc2UgXCJidWlsZFwiOlxuICAgICAgICBidWlsZChjb21tYW5kT3B0aW9uKVxuICAgICAgICAgICAgLnRoZW4oTnBtY2lFbnYuY29uZmlnU3RvcmUpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIFwiY29tbWFuZFwiOlxuICAgICAgICBjb21tYW5kMigpXG4gICAgICAgICAgICAudGhlbihOcG1jaUVudi5jb25maWdTdG9yZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbnN0YWxsXCI6XG4gICAgICAgIGluc3RhbGwoY29tbWFuZE9wdGlvbilcbiAgICAgICAgICAgIC50aGVuKE5wbWNpRW52LmNvbmZpZ1N0b3JlKTs7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwcmVwYXJlXCI6XG4gICAgICAgIHByZXBhcmUoY29tbWFuZE9wdGlvbilcbiAgICAgICAgICAgIC50aGVuKE5wbWNpRW52LmNvbmZpZ1N0b3JlKTs7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwdWJsaXNoXCI6XG4gICAgICAgIHB1Ymxpc2goY29tbWFuZE9wdGlvbilcbiAgICAgICAgICAgIC50aGVuKE5wbWNpRW52LmNvbmZpZ1N0b3JlKTs7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0ZXN0XCI6XG4gICAgICAgIHRlc3QoY29tbWFuZE9wdGlvbilcbiAgICAgICAgICAgIC50aGVuKE5wbWNpRW52LmNvbmZpZ1N0b3JlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRyaWdnZXJcIjpcbiAgICAgICAgdHJpZ2dlcigpO1xuICAgICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgICBwbHVnaW5zLmJlYXV0eWxvZy5lcnJvcihcImNvbW1hbmQgXCIgKyBjb21tYW5kT3B0aW9uLmJsdWUgKyBcIiBub3QgcmVjb2duaXNlZFwiKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICBicmVhaztcbn1cblxuIl19
