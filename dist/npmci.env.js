"use strict";
require("typings-global");
var plugins = require("./npmci.plugins");
var paths = require("./npmci.paths");
var smartstring_1 = require("smartstring");
if (process.env.CI_BUILD_REPO)
    exports.repo = new smartstring_1.GitRepo(process.env.CI_BUILD_REPO);
exports.buildStage = process.env.CI_BUILD_STAGE;
exports.dockerFilesBuilt = [];
exports.dockerFiles = [];
exports.configStore = function () {
    var config = {
        dockerRegistry: exports.dockerRegistry,
        dockerFilesBuilt: exports.dockerFilesBuilt,
        dockerFiles: exports.dockerFiles
    };
    plugins.smartfile.memory.toFsSync(JSON.stringify(config), {
        fileName: "config.json",
        filePath: paths.NpmciPackageRoot
    });
};
var configLoad = function () {
    // internal config to transfer information in between npmci shell calls
    try {
        exports.config = plugins.smartfile.local.toObjectSync(paths.NpmciPackageConfig, "json");
    }
    catch (err) {
        exports.config = {};
        exports.configStore();
        plugins.beautylog.log("config initialized!");
    }
    // project config
    try {
        if (!exports.config.project) {
            exports.config.project = plugins.smartfile.local.toObjectSync(paths.NpmciProjectDir, "npmci.json");
            plugins.beautylog.ok("project config found!");
        }
        ;
    }
    catch (err) {
        exports.config.project = {};
        plugins.beautylog.log("no project config found, so proceeding with default behaviour!");
    }
    exports.config.dockerRegistry ? exports.dockerRegistry = exports.config.dockerRegistry : void (0);
    exports.config.dockerFilesBuilt ? exports.dockerFilesBuilt = exports.config.dockerFilesBuilt : void (0);
};
configLoad();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbWNpLmVudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTyxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3hCLElBQVksT0FBTyxXQUFNLGlCQUFpQixDQUFDLENBQUE7QUFDM0MsSUFBWSxLQUFLLFdBQU0sZUFBZSxDQUFDLENBQUE7QUFDdkMsNEJBQXNCLGFBQWEsQ0FBQyxDQUFBO0FBSXBDLEVBQUUsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDO0lBQUMsWUFBSSxHQUFHLElBQUkscUJBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRWpFLGtCQUFVLEdBQVUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUM7QUFJL0Msd0JBQWdCLEdBQWdCLEVBQUUsQ0FBQztBQUNuQyxtQkFBVyxHQUFnQixFQUFFLENBQUM7QUFHOUIsbUJBQVcsR0FBRztJQUNyQixJQUFJLE1BQU0sR0FBRztRQUNULGNBQWMsRUFBRSxzQkFBYztRQUM5QixnQkFBZ0IsRUFBRSx3QkFBZ0I7UUFDbEMsV0FBVyxFQUFFLG1CQUFXO0tBQzNCLENBQUE7SUFDRCxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQ3RCO1FBQ0ksUUFBUSxFQUFDLGFBQWE7UUFDdEIsUUFBUSxFQUFDLEtBQUssQ0FBQyxnQkFBZ0I7S0FDbEMsQ0FDSixDQUFDO0FBQ04sQ0FBQyxDQUFBO0FBRUQsSUFBSSxVQUFVLEdBQUc7SUFDYix1RUFBdUU7SUFDdkUsSUFBSSxDQUFDO1FBQ0QsY0FBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkYsQ0FDQTtJQUFBLEtBQUssQ0FBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7UUFDUCxjQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ1osbUJBQVcsRUFBRSxDQUFDO1FBQ2QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsaUJBQWlCO0lBQ2pCLElBQUksQ0FBQztRQUNELEVBQUUsQ0FBQSxDQUFDLENBQUMsY0FBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUM7WUFDaEIsY0FBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBQyxZQUFZLENBQUMsQ0FBQztZQUMxRixPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFBQSxDQUFDO0lBQ04sQ0FDQTtJQUFBLEtBQUssQ0FBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7UUFDUCxjQUFNLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNwQixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFRCxjQUFNLENBQUMsY0FBYyxHQUFHLHNCQUFjLEdBQUcsY0FBTSxDQUFDLGNBQWMsR0FBRyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekUsY0FBTSxDQUFDLGdCQUFnQixHQUFHLHdCQUFnQixHQUFHLGNBQU0sQ0FBQyxnQkFBZ0IsR0FBRyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkYsQ0FBQyxDQUFBO0FBQ0QsVUFBVSxFQUFFLENBQUMiLCJmaWxlIjoibnBtY2kuZW52LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwidHlwaW5ncy1nbG9iYWxcIjtcbmltcG9ydCAqIGFzIHBsdWdpbnMgZnJvbSBcIi4vbnBtY2kucGx1Z2luc1wiO1xuaW1wb3J0ICogYXMgcGF0aHMgZnJvbSBcIi4vbnBtY2kucGF0aHNcIjtcbmltcG9ydCB7R2l0UmVwb30gZnJvbSBcInNtYXJ0c3RyaW5nXCI7XG5pbXBvcnQge0RvY2tlcmZpbGV9IGZyb20gXCIuL25wbWNpLmJ1aWxkLmRvY2tlclwiXG5cbmV4cG9ydCBsZXQgcmVwbzpHaXRSZXBvO1xuaWYocHJvY2Vzcy5lbnYuQ0lfQlVJTERfUkVQTykgcmVwbyA9IG5ldyBHaXRSZXBvKHByb2Nlc3MuZW52LkNJX0JVSUxEX1JFUE8pO1xuXG5leHBvcnQgbGV0IGJ1aWxkU3RhZ2U6c3RyaW5nID0gcHJvY2Vzcy5lbnYuQ0lfQlVJTERfU1RBR0U7XG5cbi8vIGhhbmRsaW5nIGNvbmZpZyBiZXR3ZWVuIGNvbW1hbmRzXG5leHBvcnQgbGV0IGRvY2tlclJlZ2lzdHJ5OyAvLyB3aWxsIGJlIHNldCBieSBucG1jaS5wcmVwYXJlXG5leHBvcnQgbGV0IGRvY2tlckZpbGVzQnVpbHQ6RG9ja2VyZmlsZVtdID0gW107XG5leHBvcnQgbGV0IGRvY2tlckZpbGVzOkRvY2tlcmZpbGVbXSA9IFtdO1xuZXhwb3J0IGxldCBjb25maWc7XG5cbmV4cG9ydCBsZXQgY29uZmlnU3RvcmUgPSAoKSA9PiB7XG4gICAgbGV0IGNvbmZpZyA9IHtcbiAgICAgICAgZG9ja2VyUmVnaXN0cnk6IGRvY2tlclJlZ2lzdHJ5LFxuICAgICAgICBkb2NrZXJGaWxlc0J1aWx0OiBkb2NrZXJGaWxlc0J1aWx0LFxuICAgICAgICBkb2NrZXJGaWxlczogZG9ja2VyRmlsZXNcbiAgICB9XG4gICAgcGx1Z2lucy5zbWFydGZpbGUubWVtb3J5LnRvRnNTeW5jKFxuICAgICAgICBKU09OLnN0cmluZ2lmeShjb25maWcpLFxuICAgICAgICB7XG4gICAgICAgICAgICBmaWxlTmFtZTpcImNvbmZpZy5qc29uXCIsXG4gICAgICAgICAgICBmaWxlUGF0aDpwYXRocy5OcG1jaVBhY2thZ2VSb290XG4gICAgICAgIH1cbiAgICApO1xufVxuXG5sZXQgY29uZmlnTG9hZCA9ICgpID0+IHtcbiAgICAvLyBpbnRlcm5hbCBjb25maWcgdG8gdHJhbnNmZXIgaW5mb3JtYXRpb24gaW4gYmV0d2VlbiBucG1jaSBzaGVsbCBjYWxsc1xuICAgIHRyeSB7XG4gICAgICAgIGNvbmZpZyA9IHBsdWdpbnMuc21hcnRmaWxlLmxvY2FsLnRvT2JqZWN0U3luYyhwYXRocy5OcG1jaVBhY2thZ2VDb25maWcsXCJqc29uXCIpO1xuICAgIH1cbiAgICBjYXRjaChlcnIpe1xuICAgICAgICBjb25maWcgPSB7fTtcbiAgICAgICAgY29uZmlnU3RvcmUoKTtcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cubG9nKFwiY29uZmlnIGluaXRpYWxpemVkIVwiKTtcbiAgICB9XG5cbiAgICAvLyBwcm9qZWN0IGNvbmZpZ1xuICAgIHRyeSB7XG4gICAgICAgIGlmKCFjb25maWcucHJvamVjdCl7XG4gICAgICAgICAgICBjb25maWcucHJvamVjdCA9IHBsdWdpbnMuc21hcnRmaWxlLmxvY2FsLnRvT2JqZWN0U3luYyhwYXRocy5OcG1jaVByb2plY3REaXIsXCJucG1jaS5qc29uXCIpO1xuICAgICAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cub2soXCJwcm9qZWN0IGNvbmZpZyBmb3VuZCFcIik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoKGVycil7XG4gICAgICAgIGNvbmZpZy5wcm9qZWN0ID0ge307XG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLmxvZyhcIm5vIHByb2plY3QgY29uZmlnIGZvdW5kLCBzbyBwcm9jZWVkaW5nIHdpdGggZGVmYXVsdCBiZWhhdmlvdXIhXCIpO1xuICAgIH1cbiAgICBcbiAgICBjb25maWcuZG9ja2VyUmVnaXN0cnkgPyBkb2NrZXJSZWdpc3RyeSA9IGNvbmZpZy5kb2NrZXJSZWdpc3RyeSA6IHZvaWQoMCk7XG4gICAgY29uZmlnLmRvY2tlckZpbGVzQnVpbHQgPyBkb2NrZXJGaWxlc0J1aWx0ID0gY29uZmlnLmRvY2tlckZpbGVzQnVpbHQgOiB2b2lkKDApO1xufVxuY29uZmlnTG9hZCgpOyJdfQ==
